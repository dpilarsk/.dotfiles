local provider_specs = {
  {
    name = "openrouter_gemini",
    model = "google/gemini-2.0-flash-001",
  },
  {
    name = "openrouter_gpt_4_1_nano",
    model = "openai/gpt-4.1-nano",
  },
  {
    name = "openrouter_claude_3_7_sonnet",
    model = "anthropic/claude-3.7-sonnet",
  },
  {
    name = "openrouterclaude_4_sonnet",
    model = "anthropic/claude-sonnet-4",
  },
  {
    name = "openrouterclaude_qwen3_30b",
    model = "qwen/qwen3-30b-a3b:free",
  },
  {
    name = "copilot",
    model = "gpt-4.1",
    no_api_key = true,
  },
}

return {
  "yetone/avante.nvim",
  event = "VeryLazy",
  version = false, -- Never set this value to "*"! Never!
  opts = {
    provider = "copilot",
    providers = (function()
      local api_key = "OPENROUTER_API_KEY"
      local providers = {}
      for _, spec in ipairs(provider_specs) do
        local entry = {
          model = spec.model,
        }
        if not spec.no_api_key then
          entry.__inherited_from = "openai"
          entry.endpoint = "https://openrouter.ai/api/v1"
          entry.api_key_name = api_key
        end
        providers[spec.name] = entry
      end
      return providers
    end)(),
    system_prompt = function()
      local hub = require("mcphub").get_hub_instance()
      return hub and hub:get_active_servers_prompt() or ""
    end,
    -- Using function prevents requiring mcphub before it's loaded
    custom_tools = function()
      return {
        require("mcphub.extensions.avante").mcp_tool(),
      }
    end,
    disabled_tools = {
      "list_files", -- Built-in file operations
      "search_files",
      "read_file",
      "create_file",
      "rename_file",
      "delete_file",
      "create_dir",
      "rename_dir",
      "delete_dir",
      "bash", -- Built-in terminal access
    },
  },
  -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
  build = "make",
  -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
  dependencies = {
    "nvim-treesitter/nvim-treesitter",
    "stevearc/dressing.nvim",
    "nvim-lua/plenary.nvim",
    "MunifTanjim/nui.nvim",
    --- The below dependencies are optional,
    "echasnovski/mini.pick", -- for file_selector provider mini.pick
    "nvim-telescope/telescope.nvim", -- for file_selector provider telescope
    "hrsh7th/nvim-cmp", -- autocompletion for avante commands and mentions
    "ibhagwan/fzf-lua", -- for file_selector provider fzf
    "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
    "zbirenbaum/copilot.lua", -- for providers='copilot'
    {
      -- support for image pasting
      "HakonHarnes/img-clip.nvim",
      event = "VeryLazy",
      opts = {
        -- recommended settings
        default = {
          embed_image_as_base64 = false,
          prompt_for_file_name = false,
          drag_and_drop = {
            insert_mode = true,
          },
          -- required for Windows users
          use_absolute_path = true,
        },
      },
    },
    {
      -- Make sure to set this up properly if you have lazy=true
      "MeanderingProgrammer/render-markdown.nvim",
      opts = {
        file_types = { "markdown", "Avante" },
      },
      ft = { "markdown", "Avante" },
    },
  },
}
